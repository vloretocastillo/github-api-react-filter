{"version":3,"sources":["components/filter.js","components/landing.js","components/userCard.js","components/repoCard.js","components/repoCards.js","App.js","serviceWorker.js","index.js"],"names":["Filter","onSubmit","e","props","handleFormSubmit","className","type","placeholder","id","value","React","Component","Landing","this","UserCard","state","user","nextProps","setState","login","name","avatar_url","followers","following","location","public_repos","html_url","src","alt","href","target","onClick","handleClickGoToLanding","handleClickGoToRepos","RepoCard","url","RepoCards","cards","repos","length","map","el","handleClickGoToUserCard","App","displayLanding","displayUser","displayRepos","username","data","repos_url","fetch","then","res","status","json","console","log","catch","err","preventDefault","document","getElementById","trim","content","key","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionEnterTimeout","transitionLeave","transitionLeaveTimeout","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wQAeeA,G,uLAZD,IAAD,OACL,OAEI,0BAAMC,SAAU,SAACC,GAAD,OAAM,EAAKC,MAAMC,iBAAiBF,IAAIG,UAAU,eAC5D,2BAAOC,KAAK,OAAOC,YAAY,cAAcC,GAAG,SAASH,UAAU,WAAY,6BAC/E,2BAAOC,KAAK,SAASG,MAAM,KAAKJ,UAAU,uB,GANrCK,IAAMC,YCoBZC,E,iLAZP,OAEI,6BAASP,UAAU,WACf,8DACA,kEACA,kBAAC,EAAD,CAAQD,iBAAkBS,KAAKV,MAAMC,wB,GAX/BM,IAAMC,WCqDbG,E,2MAnDXC,MAAQ,CACJC,MAAM,G,yFAKgBC,GACtBJ,KAAKK,SAAS,CACVF,KAAOC,EAAUD,S,+BAGf,IAAD,SAEqFH,KAAKE,MAAMC,KAA/FG,EAFD,EAECA,MAAOC,EAFR,EAEQA,KAAMC,EAFd,EAEcA,WAAYC,EAF1B,EAE0BA,UAAWC,EAFrC,EAEqCA,UAAWC,EAFhD,EAEgDA,SAAUC,EAF1D,EAE0DA,aAAcC,EAFxE,EAEwEA,SAK7E,OAEI,6BAASrB,UAAU,uBACf,yBAAKA,UAAU,QACX,6BAASA,UAAU,oBACf,yBAAKA,UAAU,kBACX,yBAAKsB,IAAMN,EAAaO,IAAI,4BAGpC,6BAASvB,UAAU,kBACf,6BACI,4BAAMc,EAAN,KACA,4BAAMC,IAEV,yBAAKf,UAAU,mBACX,yCAAgBiB,GAChB,yCAAgBC,IAEpB,uBAAGlB,UAAU,gBAAemB,GAAQ,oBAAgBA,IACpD,uBAAGnB,UAAU,kBAAb,iBAA8CoB,GAC9C,uBAAGI,KAAMH,EAAUI,OAAO,UAAU,4BAAQzB,UAAU,sBAAlB,wBAG5C,yBAAKA,UAAU,qBACX,4BAAQA,UAAU,cAAc0B,QAAU,kBAAM,EAAK5B,MAAM6B,2BAA3D,WACA,4BAAQ3B,UAAU,eAAe0B,QAAU,kBAAM,EAAK5B,MAAM8B,yBAA5D,mB,GA5CGvB,IAAMC,WCkBduB,E,iLAZP,OAEI,yBAAK7B,UAAU,aAEX,4BAAKQ,KAAKV,MAAMiB,MAChB,uBAAGS,KAAMhB,KAAKV,MAAMgC,IAAKL,OAAO,UAAhC,sB,GAbOpB,IAAMC,WC8BdyB,E,iLA1BD,IAEFC,EAFC,OAYL,OARIA,EAD2B,GAA3BxB,KAAKV,MAAMmC,MAAMC,OACT,qBAEA1B,KAAKV,MAAMmC,MAAME,KAAI,SAAAC,GACzB,OAAO,kBAAC,EAAD,CAAUrB,KAAMqB,EAAGrB,KAAMe,IAAKM,EAAGf,cAO5C,6BAASrB,UAAU,wBACf,yBAAKA,UAAU,iCAEX,4BAAQA,UAAU,cAAc0B,QAAU,kBAAK,EAAK5B,MAAMuC,4BAA1D,WAEFL,O,GArBM3B,IAAMC,W,iBCkIfgC,E,2MA/Hb5B,MAAQ,CACN6B,gBAAiB,EACjBC,aAAa,EACbC,cAAc,EACdC,SAAW,GACXC,MAAO,EACPV,MAAQ,I,EAGVN,uBAAyB,WACvB,EAAKd,SAAS,CACZ0B,gBAAgB,EAChBC,aAAa,EACbC,cAAc,K,EAIlBJ,wBAA0B,WACxB,EAAKxB,SAAS,CACZ0B,gBAAgB,EAChBC,aAAa,EACbC,cAAc,K,EAIlBb,qBAAuB,WACrB,EAAKf,SAAS,CACZ0B,gBAAgB,EAChBC,aAAa,EACbC,cAAc,K,EAIlBb,qBAAuB,WAAO,IAAD,EACA,EAAKlB,MAAMiC,KAAhCC,EADqB,EACrBA,UADqB,EACV9B,MACjB+B,MAAMD,GACHE,MAAM,SAACC,GACJ,GAAmB,MAAfA,EAAIC,OAKR,OAAOD,EAAIE,OAJTC,QAAQC,IAAI,gDACVJ,EAAIC,WAKXF,MAAK,SAACb,GAEAA,GACD,EAAKpB,SAAS,CACZoB,QACAM,gBAAgB,EAChBC,aAAa,EACbC,cAAc,OAKrBW,OAAM,SAASC,GACdH,QAAQC,IAAI,kBAAmBE,O,EAIrCtD,iBAAmB,SAACF,GAClBA,EAAEyD,iBACF,IAAIZ,EAAWa,SAASC,eAAe,UAAUpD,MAAMqD,OAGnD,EAAK/C,MAAMiC,MAAQD,IAAa,EAAKhC,MAAMgC,SAC7C,EAAKL,0BAGPQ,MAAM,gCAAD,OAAiCH,IACnCI,MAAM,SAACC,GACJ,GAAmB,MAAfA,EAAIC,OAKR,OAAOD,EAAIE,OAJTC,QAAQC,IAAI,gDACVJ,EAAIC,WAKTF,MAAK,SAACH,GACFA,GACD,EAAK9B,SAAS,CACZ6B,WACAC,OACAJ,gBAAgB,EAChBC,aAAa,EACbC,cAAc,OAKrBW,OAAM,SAASC,GACdH,QAAQC,IAAI,kBAAmBE,O,wEAMnC,IAAIK,EASJ,OARKlD,KAAKE,MAAM6B,eACdmB,EAAU,kBAAC,EAAD,CAASC,IAAK,EAAG5D,iBAAkBS,KAAKT,mBACxCS,KAAKE,MAAM8B,YACrBkB,EAAU,kBAAC,EAAD,CAAUC,IAAK,EAAGhD,KAAOH,KAAKE,MAAMiC,KAAOhB,uBAAyBnB,KAAKmB,uBAAyBC,qBAAsBpB,KAAKoB,uBAC7HpB,KAAKE,MAAM+B,eACrBiB,EAAU,kBAAC,EAAD,CAAWhB,SAAWlC,KAAKE,MAAMgC,SAAWT,MAAQzB,KAAKE,MAAMuB,MAAQI,wBAAyB7B,KAAK6B,2BAI7G,yBAAKrC,UAAU,OACf,kBAAC,IAAD,CACE4D,eAAe,UACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,uBAAwB,IACxBC,iBAAiB,EACjBC,uBAAwB,KACpBR,Q,GAtHIrD,IAAMC,WCKJ6D,QACW,cAA7BC,OAAOjD,SAASkD,UAEe,UAA7BD,OAAOjD,SAASkD,UAEhBD,OAAOjD,SAASkD,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD8H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.3fe717a4.chunk.js","sourcesContent":["import React from 'react';\n\nclass Filter extends React.Component {\n    render() {\n        return (\n\n            <form onSubmit={(e)=> this.props.handleFormSubmit(e)} className='filter-form'>\n                <input type=\"text\" placeholder='username...' id='filter' className='filter'  /><br/>\n                <input type=\"submit\" value=\"Go\" className='filter-submit'/>\n            </form>\n        \n        );\n      }\n}\n\nexport default Filter;","import React from 'react';\nimport Filter from './filter.js';\n\n\nclass Landing extends React.Component {\n\n    // componentWillUpdate() {\n    //     console.log('WILL UNMOUNT')\n    // }\n    render() {\n        return (\n\n            <section className='landing'>\n                <h1>Welcome to our Github Searcher</h1>\n                <h3>Type a username and click 'Search'</h3>\n                <Filter handleFormSubmit={this.props.handleFormSubmit }/>\n            </section>\n        \n        );\n      }\n}\n\nexport default Landing;\n","import React from 'react';\n\n// import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'\n\n\nclass UserCard extends React.Component {\n    state = {\n        user: false\n    }\n\n   \n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            user : nextProps.user\n        })\n    }\n    render() {\n\n        let { login, name, avatar_url, followers, following, location, public_repos, html_url } = this.state.user\n        \n\n\n\n        return (\n            \n            <section className='user-card-container'>\n                <div className='card'>\n                    <article className='avatar-container'>\n                        <div className='avatar-wrapper'>\n                            <img src={ avatar_url } alt=\"user's avatar picture\"/>\n                        </div>\n                    </article>\n                    <article className='info-container'>\n                        <div>\n                            <h2>{ login } </h2>\n                            <h4>{ name }</h4>\n                        </div>\n                        <div className='count-container'>\n                            <p>Followers: { followers }</p> \n                            <p>Following: { following }</p>\n                        </div>\n                        <p className='location-p'>{ location ? `Location: ${location}` : false  }</p>\n                        <p className='public-repos-p'>Public repos: { public_repos }</p>\n                        <a href={html_url} target=\"_blank\" ><button className='button-github-link'>Visit the profile</button></a>\n                    </article>\n                </div>\n                <div className='buttons-container'>\n                    <button className='back-action' onClick={ () => this.props.handleClickGoToLanding() }>Go Back</button>\n                    <button className='repos-action' onClick={ () => this.props.handleClickGoToRepos()} >See Repos</button>\n                </div>\n            </section>\n        \n        );\n      }\n}\n\nexport default UserCard;","import React from 'react';\n\n\nclass RepoCard extends React.Component {\n    \n    render() {\n\n        \n\n\n\n        return (\n            \n            <div className='repo-card'>\n                \n                <h1>{this.props.name}</h1>\n                <a href={this.props.url} target=\"_blank\">Go to project</a>\n            </div>\n        \n        );\n      }\n}\n\nexport default RepoCard;","import React from 'react';\nimport RepoCard from './repoCard.js';\n\n\n\nclass RepoCards extends React.Component {\n    \n    render() {\n\n        let cards;\n        if (this.props.repos.length == 0) {\n            cards = 'No repos Available'\n        } else {\n            cards = this.props.repos.map(el => {\n                return <RepoCard name={el.name} url={el.html_url}/>\n            })\n        }\n\n\n        return (\n            \n            <section className='repos-card-container'>\n                <div className='user-info-container-repo-view'>\n                    \n                    <button className='back-action' onClick={ ()=> this.props.handleClickGoToUserCard() }> Back </button>\n                </div>\n                { cards }\n            </section>\n        \n        );\n      }\n}\n\nexport default RepoCards;","import React from 'react';\nimport './App.css';\nimport Landing from './components/landing.js';\nimport UserCard from './components/userCard.js';\nimport RepoCards from './components/repoCards.js';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'\n\nclass App extends React.Component {\n  state = {\n    displayLanding : true,\n    displayUser: false,\n    displayRepos: false,\n    username : '',\n    data : false,\n    repos : []\n  }\n\n  handleClickGoToLanding = () => {\n    this.setState({ \n      displayLanding: true,\n      displayUser: false,\n      displayRepos: false\n    })\n  }\n\n  handleClickGoToUserCard = () => {\n    this.setState({ \n      displayLanding: false,\n      displayUser: true,\n      displayRepos: false\n    })\n  }\n\n  handleClickGoToRepos = () => {\n    this.setState({ \n      displayLanding: false,\n      displayUser: false,\n      displayRepos: true\n    })\n  }\n\n  handleClickGoToRepos = () => {\n    let { repos_url, login } = this.state.data   \n    fetch(repos_url)\n      .then( (res) => {\n          if (res.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' +\n              res.status);\n            return;\n          }\n          return res.json()\n        })\n      .then((repos) => {\n          // console.log(repos)\n          if(repos) {\n            this.setState({\n              repos,\n              displayLanding: false,\n              displayUser: false,\n              displayRepos: true\n\n            })\n          }\n      })\n      .catch(function(err) {\n        console.log('Fetch Error :-S', err);\n      });\n  }\n  \n  handleFormSubmit = (e) => {\n    e.preventDefault()\n    let username = document.getElementById('filter').value.trim()\n\n    // Check if the username entered is already loadind in the state and avoid making unnecesary requests\n    if (this.state.data && username === this.state.username) {\n      this.handleClickGoToUserCard()\n      return;\n    }\n    fetch(`https://api.github.com/users/${username}`)\n      .then( (res) => {\n          if (res.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' +\n              res.status);\n            return;\n          }\n          return res.json()\n        })\n        .then((data) => {\n          if(data) {\n            this.setState({\n              username,\n              data,\n              displayLanding: false,\n              displayUser: true,\n              displayRepos: false\n\n            })\n          }\n        })\n      .catch(function(err) {\n        console.log('Fetch Error :-S', err);\n      });\n  }\n\n  render() {\n\n    let content;\n    if ( this.state.displayLanding  ) {\n      content = <Landing key={1} handleFormSubmit={this.handleFormSubmit}/>;\n    } else if ( this.state.displayUser ) {\n      content = <UserCard key={2} user={ this.state.data } handleClickGoToLanding={ this.handleClickGoToLanding } handleClickGoToRepos={this.handleClickGoToRepos }/>;\n    } else if ( this.state.displayRepos ) {\n      content = <RepoCards username={ this.state.username } repos={ this.state.repos } handleClickGoToUserCard={this.handleClickGoToUserCard}/>\n    }\n     \n    return (\n        <div className=\"App\">\n        <CSSTransitionGroup\n          transitionName=\"example\"\n          transitionAppear={true}\n          transitionAppearTimeout={1000}\n          transitionEnter={true}\n          transitionEnterTimeout={1000}\n          transitionLeave={false}\n          transitionLeaveTimeout={1000}>\n            { content }     \n        </CSSTransitionGroup>\n        \n        </div>\n    \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}